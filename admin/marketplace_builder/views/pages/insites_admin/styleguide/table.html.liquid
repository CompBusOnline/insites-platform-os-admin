---
slug: admin/styleguide/tables
layout_name: insites_admin/insites_empty
format: html
---
<style>
    body {
        margin: 0;
        font-family: 'Open Sans', sans-serif;
        background-color: transparent;
    }

    h2.section-title {
        font-family: "Open Sans", sans-serif;
        padding-bottom: 10px;
        font-weight: 600;
        font-size: 18px;
        border-bottom: solid 1px #eee;
        margin: 40px 0 0px;
        color: #2C3148;
    }

    .padding-1 {
        padding: 1em 0;
    }
    
    /* DASHBOARD SWAL STYLES */
    .swal2-container.swal2-shown {
      background-color: transparent;
    }

    .swal2-show {
      box-shadow: 0px 6px 20px #aaa;
      border-radius: 1px;
      /* top: -120px; */
      /* width: 21em; */
    }

    .swal2-popup #swal2-content {
      font-size: .85rem;
      margin-bottom: 20px;
    }

    .swal2-popup .swal2-actions {
      margin-top: 0;
      display: block !important;
    }

    .swal2-popup .swal2-styled.swal2-cancel,
    .swal2-popup .swal2-styled.swal2-confirm {
      background-color: transparent;
      border: 1px solid #1e86e3 !important;
      color: #1e86e3;
      width: auto;
      height: auto;
      margin: 0 10px;
      padding: 8px 12px;
      text-transform: uppercase;
      letter-spacing: 1px;
      font-size: 14px;
      font-weight: 400;
      font-family: 'Open Sans', sans-serif;
      float: left;
      box-sizing: border-box;
      box-shadow: none !important;
      outline: none !important;
    }

    .swal2-popup .swal2-styled.swal2-confirm {
      float: right;
      background-color: #1e86e3;
      color: #fff;
    }

    .swal2-popup .swal2-styled.swal2-cancel:hover {/*,
    .swal2-popup .swal2-actions:not(.swal2-loading) .swal2-styled:hover {*/
      background-image: none !important;
      background-color: #e3eef9;
    }

    /* ripple sweet alert */
    .swal2-popup .swal2-styled.swal2-confirm,
    .swal2-popup .swal2-styled.swal2-cancel {
      position: relative;
      overflow: hidden;
      transform: translate3d(0, 0, 0);
    }

    .swal2-popup .swal2-styled.swal2-confirm:after,
    .swal2-popup .swal2-styled.swal2-cancel:after {
      content: "";
      display: block;
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      pointer-events: none;
      background-image: radial-gradient(circle, #000 10%, transparent 5.01%);
      background-repeat: no-repeat;
      background-position: 50%;
      transform: scale(10, 10);
      opacity: 0;
      transition: transform .5s, opacity 1s;
    }

    .swal2-popup .swal2-styled.swal2-confirm:active:after,
    .swal2-popup .swal2-styled.swal2-cancel:active::after {
      transform: scale(0, 0);
      opacity: .2;
      transition: 0s;
    }

    .swal2-popup .ins-loader-wrap .ins-loader-title-wrap {
      margin-top: 18px;
      color: #2c3148;
    }

    .swal2-popup .ins-loader-wrap .ins-loader-message-wrap {
      margin-top: 10px;
      margin-bottom: 32px;
      color: #8694a4;
    }

    #tableStyleGuide ins-base-table {
      margin-top: 40px;
      position: relative;
      display: block;
    }

    @media only screen and (min-width: 521px) and (max-width: 767px) {
      #tableStyleGuide ins-table .ins-searchbar-container {
        min-width: 233px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide .ins-table__pagination span {
        margin-right: 11px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide .ins-table__pagination--option {
        padding-right: 8px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide .ins-table__page {
        margin: 0 20px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide .ins-table__prev-next button:first-child {
        margin-right: -4px;
      }
    }

    @media only screen and (min-width: 414px) and (max-width: 520px) {
      #tableStyleGuide ins-table .ins-table-header-wrap {
        padding: 10px;
        transition: all 0.25s ease-in;
      }

      #tableStyleGuide ins-table .ins-searchbar-container {
        position: relative;
        min-width: auto;
        right: 0;
        margin-top: 10px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide .ins-table-overflow-wrap {
        overflow-x: scroll;
        position: relative;
        display: block;
      }

      #tableStyleGuide .ins-table .ins-table-wrap {
        table-layout: auto;
      }

      #tableStyleGuide .ins-table__stripe .ins-table__settings {
        padding: 15px 10px;
        transition: all 0.25s ease-in;
      }

      #tableStyleGuide .ins-table-action-container {
        transition: all 0.25s ease-in;
        width: 100%;
      }

      #tableStyleGuide .ins-table .ins-table-action-container ins-dropdown,
      #tableStyleGuide .ins-table__pagination span {
        float: left;
      }

      #tableStyleGuide .ins-table__pagination {
        margin-top: 10px;
        width: 100%;
      }

      #tableStyleGuide .ins-table__pagination:after {
        position: relative;
      }

      #tableStyleGuide .ins-table__page {
        width: auto;
      }

      #tableStyleGuide .ins-table__page {
        float: left;
        margin: 10px auto 0;
      }

      #tableStyleGuide .ins-table__prev-next {
        float: right;
        margin-top: 10px;
      }
    }

    @media only screen and (max-width: 320px) {
      #tableStyleGuide ins-table .ins-table-header-wrap {
        padding: 10px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide ins-table .ins-searchbar-container {
        position: relative;
        min-width: auto;
        right: 0;
        margin-top: 10px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide .ins-table-overflow-wrap {
        overflow-x: scroll;
        position: relative;
        display: block;
      }
      #tableStyleGuide .ins-table .ins-table-wrap {
        table-layout: auto;
      }
      #tableStyleGuide .ins-table__stripe .ins-table__settings {
        padding: 15px 10px;
        transition: all 0.25s ease-in;
      }
      #tableStyleGuide .ins-table-action-container {
        transition: all 0.25s ease-in;
        width: 100%;
      }
      #tableStyleGuide .ins-table .ins-table-action-container ins-dropdown,
      #tableStyleGuide .ins-table__pagination span {
        float: left;
      }
      #tableStyleGuide .ins-table__pagination {
        margin-top: 10px;
        width: 100%;
      }
      #tableStyleGuide .ins-table__pagination:after {
        position: relative;
      }
      #tableStyleGuide .ins-table__page {
        width: auto;
      }
      #tableStyleGuide .ins-table__page {
        float: left;
        margin: 10px auto 0;
      }
      #tableStyleGuide .ins-table__prev-next {
        float: right;
        margin-top: 10px;
      }
      #tableStyleGuide .ins-renderer-wrap {
        padding: 0 10px;
      }
      .content-wrap {
        padding: 0;
      }
      /* #app {
        padding-right: 0px;
      } */
    }
</style>
<div id="tableStyleGuide">
    <h2 class="section-title">Complete Example</h2>
    <ins-base-table
      id="insBaseTable"
      searchbar-placeholder="Search...">
    </ins-base-table>
    
    
        <!-- <div class="large-12 medium-12 small 12 cell">
          <ins-card steady no-padding>
              {% assign tabledata="/styleguide/data/default-table.json"%}
              {% assign table-title="Table"%}
              <ins-table
                  data-src="{{tabledata}}"
                  table-title="{{table-title}}"></ins-table>
          </ins-card>
      </div> -->
    
    <div class="padding-1">
    <div>
        <p><strong>HTML: </strong></p>
        <script type="text/plain" class="language-markup">
<ins-base-table
  id="insBaseTable"
  heading="Table"
  searchbar-placeholder="Search...">
</ins-base-table>
        </script>
        <br /><p><strong>SCRIPT: </strong></p>
        <script type="text/plain" class="language-markup">
<script src="/assets/js/ins.js">&lt;/script&gt;
<script>
  var insBaseTable = document.getElementById('insBaseTable');
  var rawData = [];
  var filteredData = [];
  var displayedData = [];
  var tableHeaders = [];
  var totalCount = 0;
  var pageNumber = 1;
  var pageSize = 10;
  var searchKeyword = '';
  var sortedKeyword = '';

  insBaseTable.loadingScreen = true;
  insBaseTable.bulkActions = ['Archive'];
  insBaseTable.rowActions = ['Archive'];
  insBaseTable.addEventListener('onPaginationChange', tablePaginationHandler);
  insBaseTable.addEventListener('onTableSearch', tableSearchHandler);
  insBaseTable.addEventListener('onTableSort', tableSortHandler);
  insBaseTable.addEventListener('onTableBulkAction', tableBulkActionHandler);
  insBaseTable.addEventListener('onTableRowAction', tableBulkRowHandler);

  function tablePaginationHandler(event) {
    insBaseTable.loadingScreen = true;
    pageSize = event.detail.pageSize;
    pageNumber = event.detail.pageNumber;
    processTableData()
  }

  function tableSearchHandler(event) {
    insBaseTable.loadingScreen = true;
    searchKeyword = event.detail.value;

    if (!searchKeyword) {
      processTableData();
      return;
    }

    filteredData = [];
    rawData.forEach((value) => {
      Object.keys(value).forEach((key) => {
        if (key === 'Default Column') {
          var match = value[key];
          if (match.toLowerCase().includes(searchKeyword.toLowerCase())) {
            filteredData.push(value);
          }
        }
      });
    });

    if (sortedKeyword && filteredData.length > 1) {
      filteredData.sort(dynamicKeySort(sortedKeyword));
    }
    insBaseTable.pageNumber = 1;
    processTableData();

    if (!filteredData.length) {
      insBaseTable.loadingScreen = true;
      insBaseTable.loaderTitle = '';
      insBaseTable.loaderMessage = 'No result found for "' + searchKeyword + '"';
      insBaseTable.loaderIcon = '';
    }
  }

  function tableSortHandler(event) {
    sortedKeyword = event.detail.order === 'asc' ? event.detail.keyword : `-${event.detail.keyword}`;
    if (searchKeyword) {
      filteredData.sort(dynamicKeySort(sortedKeyword));
    } else {
      rawData.sort(dynamicKeySort(sortedKeyword));
    }
    processTableData();
  }

  function tableBulkActionHandler(event) {
    if (event.detail.action === 'Archive') {
      archiveSelection(event.detail.selections);
    }
  }

  function tableBulkRowHandler(event) {
    if (event.detail.action === 'Archive') {
      archiveItem(event.detail.data);
    }
  }

  function archiveItem(value) {
    swal({
      title: '',
      // text: "Are you sure you want to delete these items",
      html: `
        <ins-loader
          state-icon="warning"
          icon-color="warning"
          state-message="Are you sure you want to archive this item?">
        </ins-loader>`,
      type: '',
      showCancelButton: true,
      confirmButtonText: 'Archive'
    }).then((result) => {
      deleteItem(value);
      processTableData();
    });
  }

  function archiveSelection(selections) {
    swal({
      title: '',
      html: `
      <ins-loader
        state-icon="warning"
        icon-color="warning"
        state-message="Are you sure you want to archive these items?">
      </ins-loader>`,
      type: '',
      showCancelButton: true,
      confirmButtonText: 'Archive'
    }).then((result) => {
      if (result.value) {
        let counter = 0;
        selections.forEach(value => {

          this.deleteItem(value);
          counter++;

          if (selections.length === counter) {
            insBaseTable.resetSelections();
            processTableData()
          }
        });
      }
    });
  }

  function deleteItem(value) {
    var selectionIndex;
    var searchSelectionIndex;

    if (rawData) {
      selectionIndex = rawData.findIndex(item => {
        return item.Id === value;
      });
    }

    if (filteredData) {
      searchSelectionIndex = filteredData.findIndex(item => {
        return item.Id === value;
      });
    }

    if (selectionIndex > -1) {
      rawData.splice(selectionIndex, 1);
    }

    if (searchSelectionIndex > -1) {
      filteredData.splice(searchSelectionIndex, 1);
    }
  }

  function processTableData() {
    var last_index = pageNumber * pageSize;
    var first_index = (last_index - pageSize) + 1;

    displayedData = [];

    if (searchKeyword) {

      filteredData.forEach((value, index) => {
        if (index >= first_index && index <= last_index) {
          displayedData.push(value);
        } else if (filteredData.length < pageSize) {
          displayedData.push(value);
        }
      });
      insBaseTable.totalCount = filteredData.length;

    } else {

      rawData.forEach((value, index) => {
        if (index >= first_index && index <= last_index) {
          displayedData.push(value);
        }
      });
      insBaseTable.totalCount = rawData.length;

    }

    insBaseTable.tableData = displayedData;
    insBaseTable.loadingScreen = false;
  }

  function dynamicKeySort(key) {
    var OrderSortIndex = 1;

    if (key[0] === "-") {
      OrderSortIndex = -1;
      key = key.substr(1);
    }

    return function (a, b) {
      var num = (a[key] < b[key]) ? -1 : (a[key] > b[key]) ? 1 : 0;
      return num * OrderSortIndex;
    }
  }

  function fetchDataFromSrc() {

    insBaseTable.loadingScreen = true;

    insBaseTable.loaderTitle = "Processing Your Data";
    insBaseTable.loaderMessage = "Just a moment, we're fetching and processing your data.";
    insBaseTable.loaderIcon = "processing";

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        var tableData = JSON.parse(this.responseText);
        rawData = tableData.list;
        insBaseTable.totalCount = tableData.count;
        insBaseTable.tableHeaders = [{
            label: "Default Column",
            type: 'string'
          },
          {
            label: "Date Column",
            type: 'string',
            sortable: true
          },
          {
            label: "Number Column",
            type: 'number',
            sortable: true
          },
          {
            label: "Currency Column",
            type: 'currency',
            sortable: true
          }
        ];

        processTableData();
      }
    };
    xhttp.open("GET",
      'https://ag64gmtsc0.execute-api.us-east-2.amazonaws.com/insites-dummy-deployment/insites-dummy-get-table', true
    );
    xhttp.send();
  }

  fetchDataFromSrc();
&lt;/script&gt;

&lt;/script&gt;</script>
    </div>
    </div>
</div>
<script src="../../../assets/js/ins.js"></script>
<script>
  var insBaseTable = document.getElementById('insBaseTable');
  var rawData = [];
  var filteredData = [];
  var displayedData = [];
  var tableHeaders = [];
  var totalCount = 0;
  var pageNumber = 1;
  var pageSize = 10;
  var searchKeyword = '';
  var sortedKeyword = '';

  insBaseTable.loadingScreen = true;
  insBaseTable.bulkActions = ['Archive'];
  insBaseTable.rowActions = ['Archive'];
  insBaseTable.addEventListener('onPaginationChange', tablePaginationHandler);
  insBaseTable.addEventListener('onTableSearch', tableSearchHandler);
  insBaseTable.addEventListener('onTableSort', tableSortHandler);
  insBaseTable.addEventListener('onTableBulkAction', tableBulkActionHandler);
  insBaseTable.addEventListener('onTableRowAction', tableBulkRowHandler);

  function tablePaginationHandler(event) {
    insBaseTable.loadingScreen = true;
    pageSize = event.detail.pageSize;
    pageNumber = event.detail.pageNumber;
    processTableData()
  }

  function tableSearchHandler(event) {
    insBaseTable.loadingScreen = true;
    searchKeyword = event.detail.value;

    if (!searchKeyword) {
      processTableData();
      return;
    }

    filteredData = [];
    rawData.forEach((value) => {
      Object.keys(value).forEach((key) => {
        if (key === 'Default Column') {
          var match = value[key];
          if (match.toLowerCase().includes(searchKeyword.toLowerCase())) {
            filteredData.push(value);
          }
        }
      });
    });

    if (sortedKeyword && filteredData.length > 1) {
      filteredData.sort(dynamicKeySort(sortedKeyword));
    }
    insBaseTable.pageNumber = 1;
    processTableData();

    if (!filteredData.length) {
      insBaseTable.loadingScreen = true;
      insBaseTable.loaderTitle = '';
      insBaseTable.loaderMessage = 'No result found for "' + searchKeyword + '"';
      insBaseTable.loaderIcon = '';
    }
  }

  function tableSortHandler(event) {
    sortedKeyword = event.detail.order === 'asc' ? event.detail.keyword : `-${event.detail.keyword}`;
    if (searchKeyword) {
      filteredData.sort(dynamicKeySort(sortedKeyword));
    } else {
      rawData.sort(dynamicKeySort(sortedKeyword));
    }
    processTableData();
  }

  function tableBulkActionHandler(event) {
    if (event.detail.action === 'Archive') {
      archiveSelection(event.detail.selections);
    }
  }

  function tableBulkRowHandler(event) {
    if (event.detail.action === 'Archive') {
      archiveItem(event.detail.data);
    }
  }

  function archiveItem(value) {
    swal({
      title: '',
      // text: "Are you sure you want to delete these items",
      html: `
        <ins-loader
          state-icon="warning"
          icon-color="warning"
          state-message="Are you sure you want to archive this item?">
        </ins-loader>`,
      type: '',
      showCancelButton: true,
      confirmButtonText: 'Archive'
    }).then((result) => {
      deleteItem(value);
      processTableData();
    });
  }

  function archiveSelection(selections) {
    swal({
      title: '',
      html: `
      <ins-loader
        state-icon="warning"
        icon-color="warning"
        state-message="Are you sure you want to archive these items?">
      </ins-loader>`,
      type: '',
      showCancelButton: true,
      confirmButtonText: 'Archive'
    }).then((result) => {
      if (result.value) {
        let counter = 0;
        selections.forEach(value => {

          this.deleteItem(value);
          counter++;

          if (selections.length === counter) {
            insBaseTable.resetSelections();
            processTableData()
          }
        });
      }
    });
  }

  function deleteItem(value) {
    var selectionIndex;
    var searchSelectionIndex;

    if (rawData) {
      selectionIndex = rawData.findIndex(item => {
        return item.Id === value;
      });
    }

    if (filteredData) {
      searchSelectionIndex = filteredData.findIndex(item => {
        return item.Id === value;
      });
    }

    if (selectionIndex > -1) {
      rawData.splice(selectionIndex, 1);
    }

    if (searchSelectionIndex > -1) {
      filteredData.splice(searchSelectionIndex, 1);
    }
  }

  function processTableData() {
    var last_index = pageNumber * pageSize;
    var first_index = (last_index - pageSize) + 1;

    displayedData = [];

    if (searchKeyword) {

      filteredData.forEach((value, index) => {
        if (index >= first_index && index <= last_index) {
          displayedData.push(value);
        } else if (filteredData.length < pageSize) {
          displayedData.push(value);
        }
      });
      insBaseTable.totalCount = filteredData.length;

    } else {

      rawData.forEach((value, index) => {
        if (index >= first_index && index <= last_index) {
          displayedData.push(value);
        }
      });
      insBaseTable.totalCount = rawData.length;

    }

    insBaseTable.tableData = displayedData;
    insBaseTable.loadingScreen = false;
  }

  function dynamicKeySort(key) {
    var OrderSortIndex = 1;

    if (key[0] === "-") {
      OrderSortIndex = -1;
      key = key.substr(1);
    }

    return function (a, b) {
      var num = (a[key] < b[key]) ? -1 : (a[key] > b[key]) ? 1 : 0;
      return num * OrderSortIndex;
    }
  }

  function fetchDataFromSrc() {

    insBaseTable.loadingScreen = true;

    insBaseTable.loaderTitle = "Processing Your Data";
    insBaseTable.loaderMessage = "Just a moment, we're fetching and processing your data.";
    insBaseTable.loaderIcon = "processing";

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        var tableData = JSON.parse(this.responseText);
        rawData = tableData.list;
        insBaseTable.totalCount = tableData.count;
        insBaseTable.tableHeaders = [{
            label: "Default Column",
            type: 'string',
            sortable: true
          },
          {
            label: "Date Column",
            type: 'string',
            sortable: true
          },
          {
            label: "Number Column",
            type: 'number',
            sortable: true
          },
          {
            label: "Currency Column",
            type: 'currency',
            sortable: true
          }
        ];

        processTableData();
      }
    };
    xhttp.open("GET",
      'https://ag64gmtsc0.execute-api.us-east-2.amazonaws.com/insites-dummy-deployment/insites-dummy-get-table', true
    );
    xhttp.send();
  }

  fetchDataFromSrc();
</script>